x <- matrix(rnorm(4), 2, 2)
x
x <- matrix(1:4, 2, 2)
x
makeCacheMatrix(x)
makeCacheMatrix <- function(x = matrix()) {
matrix_inverse <- NULL
set <- function(y) {
x <<- y
matrix_inverse <<- NULL
}
get <- function() x
setmatrix_inverse <- function(solve) matrix_inverse <<- solve
getmatrix_inverse <- function() matrix_inverse
list(set = set, get = get,
setmean = setmatrix_inverse,
getmean = getmatrix_inverse)
}
makeCacheMatrix(x)
cacheSolve <- function(x, ...) {
Inverse <- x$getmatrix_inverse()
if(!is.null(Inverse)) {
message("getting cached data")
return(Inverse)
}
# manual calculation for inverse matrix using solve
# function
data <- x$get()
Inverse <- solve(data, ...)
x$setmatrix_inverse(Inverse)
Inverse
}
cashSolve(x)
cachSolve(x)
cacheSolve(x)
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector(1:4)
makeVector(1:4)
cachemean(x)
x=1:4
makeVector(1:4)
makeVector(x)
cachemean(x)
View(makeCacheMatrix)
View(makeCacheMatrix)
View(makeCacheMatrix)
View(makeVector)
View(cachemean)
View(cacheSolve)
cachmean(x)
cachemean(x)
View(makeCacheMatrix)
View(makeVector)
View(cachemean)
x=1:4
m=makeVector(x)
m
y=cachemean(m)
y
inverse=makeCacheMatrix(matrix(1:4,2,2))
inverse
re=cacheSolve(inverse)
re=cacheSolve(inverse)
cacheSolve(inverse)
inv=makeCacheMatrix(matrix(1:4,2,2))
cacheSolve(inv)
z=matrix(1:4,2,2)
inv=makeCacheMatrix(z
)
cacheSolve(inv)
inv=makeCacheMatrix(z
clear
clear
x= matrix(1:4,2,2)
x
makeCacheMatrix <- function(x = matrix()) {
matrix_inverse <- NULL
set <- function(y) {
x <<- y
matrix_inverse <<- NULL
}
get <- function() x
setmatrix_inverse <- function(solve) matrix_inverse <<- solve
getmatrix_inverse <- function() matrix_inverse
list(set = set, get = get,
setmean = setmatrix_inverse,
getmean = getmatrix_inverse)
}
## The following function calculates the inverse  of the special "square matrix" created
## with the above function. However, it first checks to see if the inverse
## has already been calculated. If so, it gets the inverse from the cache and
## skips the computation. Otherwise, it calculates the inverse of the matrix
## and sets the value of the inverse in the cache via the setmatrix_inverse function.
cacheSolve <- function(x, ...) {
Inverse <- x$getmatrix_inverse()
if(!is.null(Inverse)) {
message("getting cached data")
return(Inverse)
}
# manual calculation for inverse matrix using solve
# function
data <- x$get()
Inverse <- solve(data, ...)
x$setmatrix_inverse(Inverse)
Inverse
}
## testing the code
View(cacheSolve)
View(makeCacheMatrix)
View(makeCacheMatrix)
View(makeCacheMatrix)
makeCacheMatrix(x)
in=makeCacheMatrix(x)
y=makeCacheMatrix(x)
y
View(makeCacheMatrix)
View(makeCacheMatrix)
z=cacheSolve(y)
y=makeCacheMatrix(x)
z=cacheSolve(y)
## repeating calculation make your programm so slow we can solve this by caching the result
## when i need it we can call it again instead of calculate it again
## it is the setter and getter for the matirx and the inverse matrix function
makeCacheMatrix <- function(x = matrix()) {
matrix_inverse <- NULL
set <- function(y) {
x <<- y
matrix_inverse <<- NULL
}
get <- function() x
setmatrix_inverse <- function(solve) matrix_inverse <<- solve
getmatrix_inverse <- function() matrix_inverse
list(set = set, get = get,
setmatrix_inverse = setmatrix_inverse,
getmatrix_inverse = getmatrix_inverse)
}
## The following function calculates the inverse  of the special "square matrix" created
## with the above function. However, it first checks to see if the inverse
## has already been calculated. If so, it gets the inverse from the cache and
## skips the computation. Otherwise, it calculates the inverse of the matrix
## and sets the value of the inverse in the cache via the setmatrix_inverse function.
cacheSolve <- function(x, ...) {
Inverse <- x$getmatrix_inverse()
if(!is.null(Inverse)) {
message("getting cached data")
return(Inverse)
}
# manual calculation for inverse matrix using solve
# function
data <- x$get()
Inverse <- solve(data, ...)
x$setmatrix_inverse(Inverse)
Inverse
}
## testing the code
x=matrix(1:4,2,2)
y=makeCacheMatrix(x)
z=cacheSolve(y)
z
z=cacheSolve(y)
q()
